클래스 -> 추상 클래스 -> 순수 추상 클래스 -> 인터페이스
즉, 순수 추상 클래스를 더 편리하게 사용할 수 있도록 제공하는게 인터페이스이다.

순수 추상 클래스 특징
1. 인스턴스를 생성할 수 없다.
2. 상속시 모든 메서드를 오버라이딩 해야 한다.
3. 주로 다형성을 위해 사용된다.

인터페이스 특징
1. 앞서 설명한 순수 추상클래스이 특징을 모두 포함한다.
2. 인퍼에이스 메서드는 모두 public abstract 이다.
3. 메서드에 public abstract를 생략할 수 있다. (참고 생략을 권장한다.)
4. 인터페이스는 다중 구현(다중 상속)을 지원한다.

클래스, 추상 클래스, 인터페이스는 모두 똑같다.
- 클래스, 추상 클래스, 인터페이스는 프로그램 코드, 메몰 구조상 모두 똑같다.
- 인터페이스는 순수 추상 클래스와 비슷하다고 생각하면 된다.

상소과 구현
- 상속과 구현은 사람이 표현하는 단어만 다를 뿐이지만 자바 입장에서는 똑같다.
- 일반 상속 구조와 동일하게 작동한다.

인터페이스를 사용해야 하는 이유
- 순수 추상 클래스와 인터페이스를 비교했을 때 차이점을 느끼기가 어렵다.
1. 제약 : 순수 추상 클래스는 시간이 지남에 따라 필요에 의해 일반 메서드가 구현될 수 있고,
         그런 경우 순수 추상 클래스에 일반 추상 클래스로 변경될 수 있다.
         인터페이스는 위와 같은 일을 원천 차단시킬 수 있다.
2. 다중 구현 : 자바에서는 클래스 상속은 부모 하나만 지정할 수 있다.
             반면에 인터페이스는 부모를 여러명 두는 다중 구현(다중 상속)이 가능하다.

자바가 다중 상속을 지원하지 않는 이유
1. 다중 상속을 사용할 경우 두 부모가 같은 ㅁ서드를 가졌을 때 자식에서
    호출한 메서드가 어느 부모의 메서드인지 알 수 없는 문제가 발생한다. 이것을 다이아몬드 문제라 한다.
2. 다중 상속을 사용하면 클래스 계층 구조가 매우 복잡해질 수 있다.

인터페이스의 다중 구현은 허용한 이유
- 인터페이스는 모두 추상 메서드로 이루어져 있기 때문이다.