래퍼 클래스
기본형의 한계
- 자바는 객체지향 언어
- 자바 언어 안에 객체가 아닌 것들이 존재한다.
- int, double 등과 같은 기본형 타입이다.
- 기본형은 객체가 아니기 때문에 다음과 같은 한계가 있다.
  1. 객체 아님 : 기본형 데이터는 객체가 아니기 때문에, 객체 지향 프로그래밍의 장점을 살릴수 없다.
                예를 들어 객체는 유용한 메서드를 제공할 수 있는데, 기본형은 객체가 아니므로 메서드를
                제공할 수 없다.
    1-1 추가로 객체 참조가 필요한 컬랙션 프레임워크를 사용할 수 없다. 그릭 제네릭도 사용할 수 없다.
  2. null 값을 가질 수 없음 : 기본형 데치터 타입은 null 값을 가질 수 없다. 때로는 데이터가 없음 이라는
     상태를 나타내야 할 필요가 있는데, 기본형은 항상 값을 가지기 때문에 이런 표현을 할 수 없다.

기본형의 한계를 이해하기 위해, 두 값을 비교해서 다음과 같은 결과를 출력하는 간단한 코드를 작성해볼 것이다.
- 왼쪽의 더 작다 - 1
- 두 값이 같다 0
- 읜쪽의 값이 더 크다.

value와 비교 대상 값을 compareTo() 라는 외부 메서드를 사용해서 비교한다.
그런데 자기 자신의 value와 다른 값을 연산하는 것이기 때문에 항상 자기 자신의 값인 vlaue가 사용된다.
이런 경우 만약 value가 객체라면 value 객체 스스로 자신의 값과 다른 값을 비교하는 메서드를 만드는 것이 더 유용하다.

MyInteger는 int value 라는 단순한 기본형 변수를 하나 가지고 있다.
이 기본형 변수를 편리하게 사용하도록 다양한 메서드를 제공한다.
compareTo() 메서드를 클래스 내부로 캡슐화 한다.
이 클래스는 불변으로 설계했다.

입력 값이 -1일 때 1을 반환한다.
그런데 배열에 없는 값인 100을 입력해도 같은 -1이 반환한다.
입력값이 -1 일 때를 생각해보면, 배열에 -1 값이 있어서 -1을 반환한 것인지, 아니면 -1 없어서 -1을 반환한건지
명확하지 않다.

자바 래퍼 클래스
- 래퍼 클래스는 쉽게 말해서 기본형의 객체 버전이다.
- 자바는 기본형에 대응하는 래퍼클래스를 기본으로 제공한다.
  byte -> Byte
  short -> Short
  int -> Integer
  long -> Long
  float -> Float
  double -> Double
  char -> Character
  boolean -> Boolean
- 자바에서 제공하는 래퍼클래스의 특징
  1. 불변
  2. equals로 비교해야 한다.
